@model Silverline.Core.ViewModels.AppointmentDetailViewModel

@{
	ViewData["Title"] = "Ongoing Appointment";
}

<div class="pt-4 ml-4 pl-3 mb-4">
	<h1>Ongoing Appointment</h1>
</div>

<div class="container-fluid" style="width: 95%">
	<form method="post">
		<div class="row">
			<div class="card" style="width: 100%">
				<div class="row">
					<div class="col-8">
						<h3 class="row mb-3 mt-4 ml-4">
							Diagnostic Title
						</h3>
						<div class="row mb-4 ml-4">
							<input asp-for="Appointment.AppointmentId" class="form-control" hidden/>
							<input asp-for="Appointment.AppointmentTitle" class="form-control mb-4" required/>
						</div>
						<h3 class="row mb-3 mt-4 ml-4">
							Descriptive Comments
						</h3>
						<div class="row mb-4 ml-4">
							<textarea asp-for="Appointment.AppointmentDescription" class="form-control" required></textarea>
						</div>
					</div>
					<div class="col-4 mt-5">
						<h5 class="row mt-4 mb-4 ml-3 justify-content-center">
							@Model.PatientName
						</h5>
						<div class="row mb-4 justify-content-center">
							@Model.PatientAge years old
						</div>
						<div class="row mb-4 ml-3 justify-content-center">
							@DateTime.Now
						</div>
					</div>
				</div>
			</div>

			<div class="card" style="width: 100%">
				<div class="row">
					<h3 class="row mb-3 mt-4 ml-4">
						Medicinal Prescriptions
					</h3>
				</div>
				<div class="row ml-3" style="width: 98%">
					<input type="hidden" id="hiddenLastMedicineIndex" value="0" />
					<table id="medicationTable" class="table table-striped">
						<thead>
							<tr>
								<th width="25%">Medicine</th>
								<th width="15%">Dose</th>
								<th width="15%">Time Period</th>
								<th width="15%">Time Format</th>
								<th width="20%">Remarks</th>
								<th width="20%">Options</th>
							</tr>
						</thead>
						<tbody>
							@for (int i = 0; i < Model.Appointment.MedicalTreatments.Count; i++)
							{
								<tr>
									<td>
										@Html.DropDownListFor(x => x.Appointment.MedicalTreatments[i].MedicineId, Model.MedicineList, "Select a medicine", new { @class = "form-control", @onchange = "this.options[0].disabled = true;" })
									</td>
									<td>
										@Html.TextBoxFor(x => x.Appointment.MedicalTreatments[i].Dose, new { @class = "form-control" } )
									</td>
									<td>
										@Html.TextBoxFor(x => x.Appointment.MedicalTreatments[i].TimePeriod, new { @class = "form-control" } )
									</td>
									<td>
										@Html.TextBoxFor(x => x.Appointment.MedicalTreatments[i].TimeFormat, new { @class = "form-control" } )
									</td>
									<td>
										@Html.TextBoxFor(x => x.Appointment.MedicalTreatments[i].DoctorRemarks, new { @class = "form-control" } )
									</td>
									<td>
										<button id="btnadd-@i" type="button" class="btn btn-dark visible" onclick="addMedicine(this)" style="position: absolute;">
											Add
										</button>
										<button id="btnremove-@i" type="button" class="btn btn-outline-dark invisible" onclick="deleteMedicine(this)" style="position: absolute;">
											Delete
										</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
			
			<div class="card" style="width: 100%">
				<div class="row">
					<h3 class="row mb-3 mt-4 ml-4">
						Preliminary Investigations
					</h3>
				</div>
				<div class="row ml-3" style="width: 98%">
					<input type="hidden" id="hiddenLastTestIndex" value="0" />
					<table id="testTable" class="table table-striped">
						<thead>
							<tr>
								<th width="40%">Test Type</th>
								<th width="45%">Remarks</th>
								<th width="9%">Options</th>
							</tr>
						</thead>
						<tbody>
							@for (int i = 0; i < Model.Appointment.LaboratoryDiagnosis.Count; i++)
							{
								<tr>
									<td>
										@Html.DropDownListFor(x => x.Appointment.LaboratoryDiagnosis[i].TestId, Model.LaboratoryTestList, "Select a test", new { @class = "form-control", @id = "test_" + @i, @onchange = "this.options[0].disabled = true;" })
									</td>
									<td>
										@Html.TextBoxFor(x => x.Appointment.LaboratoryDiagnosis[i].DoctorRemarks, new { @class = "form-control", @id = "testRemarks_" + @i } )
									</td>
									<td>
										<button id="btnaddTest-@i" type="button" class="btn btn-dark visible" onclick="addTest(this)" style="position: absolute;">
											Add
										</button>
										<button id="btnremoveTest-@i" type="button" class="btn btn-outline-dark invisible" onclick="deleteTest(this)" style="position: absolute;">
											Delete
										</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>

			<div class="col-12 btn-group">
				<div class="col-6 form-group text-left p-2">
					<input type="submit" value="Finalize Appointment" class="btn btn-dark" />
				</div>
			</div>

		</div>
	</form>
</div>

@section Scripts{
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script type="text/javascript">

		function addMedicine(btn) {
			var table = document.getElementById('medicationTable');
			var rows = table.getElementsByTagName('tr');

			var rowOuterHTML = rows[rows.length - 1].outerHTML;

			var lastrowIndex = document.getElementById('hiddenLastMedicineIndex').value;
			var nextrowIndex = eval(lastrowIndex) + 1;
			document.getElementById('hiddenLastMedicineIndex').value = nextrowIndex;

			rowOuterHTML = rowOuterHTML.replaceAll('_' + lastrowIndex, '_' + nextrowIndex);
			rowOuterHTML = rowOuterHTML.replaceAll('[' + lastrowIndex + ']', '[' + nextrowIndex + ']');
			rowOuterHTML = rowOuterHTML.replaceAll('-' + lastrowIndex, '-' + nextrowIndex);

			console.log(rowOuterHTML);
			console.log(lastrowIndex);
			console.log(nextrowIndex);


			var newRow = table.insertRow();
			newRow.innerHTML = rowOuterHTML;

			var btnAddID = btn.id;
			var btnDeleteID = btnAddID.replaceAll('btnadd', 'btnremove');

			var delbtn = document.getElementById(btnDeleteID);
			delbtn.classList.add("visible");
			delbtn.classList.remove("invisible");

			var addbtn = document.getElementById(btnAddID);
			addbtn.classList.remove("visible");
			addbtn.classList.add("invisible");
		}

		function deleteMedicine(btn) {
			$(btn).closest('tr').remove();
		}

		function addTest(btn) {
			var table = document.getElementById('testTable');
			var rows = table.getElementsByTagName('tr');

			var rowOuterHTML = rows[rows.length - 1].outerHTML;

			var lastrowIndex = document.getElementById('hiddenLastTestIndex').value;
			var nextrowIndex = eval(lastrowIndex) + 1;
			document.getElementById('hiddenLastTestIndex').value = nextrowIndex;

			rowOuterHTML = rowOuterHTML.replaceAll('_' + lastrowIndex, '_' + nextrowIndex);
			rowOuterHTML = rowOuterHTML.replaceAll('[' + lastrowIndex + ']', '[' + nextrowIndex + ']');
			rowOuterHTML = rowOuterHTML.replaceAll('-' + lastrowIndex, '-' + nextrowIndex);

			var newRow = table.insertRow();
			newRow.innerHTML = rowOuterHTML;

			var btnAddID = btn.id;
			console.log(btnAddID);
			var btnDeleteID = btnAddID.replaceAll('btnadd', 'btnremove');

			var delbtn = document.getElementById(btnDeleteID);
			delbtn.classList.add("visible");
			delbtn.classList.remove("invisible");

			var addbtn = document.getElementById(btnAddID);
			addbtn.classList.remove("visible");
			addbtn.classList.add("invisible");
		}

		function deleteTest(btn) {
			$(btn).closest('tr').remove();
		}

		tinymce.init({
			selector: 'textarea',
			min_width: 50000
		});


	</script>
}

